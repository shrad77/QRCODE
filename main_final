from datetime import timedelta
import firebase as firebase
from kivymd.app import MDApp
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.screenmanager import ScreenManager
from kivy.lang import Builder
from kivy.metrics import dp
from kivy.properties import StringProperty
from kivymd.uix.menu import MDDropdownMenu
from kivymd.toast import toast
from kivy.factory import Factory
import qrcode
import os
from plyer import filechooser
from firebase_admin import credentials,initialize_app,storage,db
from kivy.core.window import Window
import firebase_admin
Window.size = 360,640

cred = credentials.Certificate("./venv/Scripts/qr-project-a2592-1a64216a7484.json")
initialize_app(cred,{
    'storageBucket':'qr-project-a2592.appspot.com',
    'databaseURL': 'https://qr-project-a2592-default-rtdb.firebaseio.com/'
})

bucket = storage.bucket()
db_ref = db.reference('ORDER ID')


class Function(ScreenManager,FloatLayout):
    icon = StringProperty()
    def dropdown(self):
        bucket = storage.bucket()
        blobs = bucket.list_blobs()
        files = [blob.name for blob in blobs]
        menu_items =[
            {
                "text" : "file",
                "on_release" : lambda x="file": self.set_item(x),

               } for file in files




           ]
        self.menu = MDDropdownMenu(
            caller=self.ids.drop_item,
            items=menu_items,
            position="center",
            width_mult=4

           )
        self.menu.bind()
        self.menu.open()

    def set_item(self,text_item):
           self.screen.ids.drop_item.text=text_item

    def open(self, path, filename):
        with open(os.path.join(path, filename[0])) as fi:
            print(fi.read())
            details = fi.read()


    def selected(self, selection, file_name=None):
        print('selected:' + file_name[0])
        path = 'selected:' + file_name[0]


    def file_chooser(self):
        file_path = filechooser.open_file()
        self.selected(file_path)



    def selected(self, file_path_list):
        file_path = file_path_list[0]

        # Check that the file has a PDF extension
        if not file_path.endswith('.pdf'):
            print('Selected file is not a PDF')
            return

        # Convert the file path to a string
        file_path_str = os.fspath(file_path)

        # Create a database reference
        ref = db.reference('ORDER ID')

        # Get a reference to the Firebase Storage bucket
        bucket = storage.bucket()

        # Upload the file to Firebase Storage
        file_name = os.path.basename(file_path_str)
        blob = bucket.blob(file_name)
        with open(file_path_str, 'rb') as f:
            blob.upload_from_file(f)

        # Save the download URL of the uploaded file to the Realtime Database
        download_url = blob.generate_signed_url(timedelta(seconds=300), method='GET')
        ref.push().set({
            'file_name': file_name,
            'download_url': download_url
        })



class Main(MDApp):
    Builder.load_file("layout.kv")
    def build(self):
         return Function()

Main().run()
